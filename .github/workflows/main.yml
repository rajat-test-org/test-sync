name: Replicate Issues

on:
  issues:
    types:
      - opened
      - reopened
      - closed

jobs:
  replicate-issues:
    if: ${{ !github.event.issue.pull_request }}
    
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python3
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyGithub==1.58

      - name: Replicate Issue
        run: |
          # ISSUE_NUMBER=$(echo "${{ github.event.issue.number }}")
          # ISSUE_TITLE=$(echo "${{ github.event.issue.title }}")
          # ISSUE_BODY=$(echo "${{ github.event.issue.body }}")
          # ISSUE_LABELS=$(echo "${{ github.event.issue.labels }}")
          # ISSUE_STATE=$(echo "${{ github.event.issue.state }}")
          
          ENTERPRISE_REPO="Rajat-Agrawal/test_issue_sync"

          python - <<EOF
          import subprocess as sp
          from github import Github
          import os

          GH_TOKEN = os.environ.get("GH_TOKEN")
          FILTER_TOPIC = os.environ.get("FILTER_TOPIC")
          GHE_TOKEN = os.environ.get("GHE_TOKEN")
          ISSUE_TITLE = sp.getoutput('echo "${{ github.event.issue.title }}"')
          ISSUE_LABELS = sp.getoutput('echo "${{ github.event.issue.labels }}"')

          print(ISSUE_TITLE)
          print(ISSUE_LABELS)

          # Variables  
          private_repo = "Rajat-Agrawal/test_issue_sync"
          body_template = "Reference for external issue: "
          skipReference = False

          # Authentication
          ge = Github(GH_TOKEN)
          ghe = Github(base_url="https://github.ibm.com/api/v3", login_or_token=GHE_TOKEN)
          pri_repo = ghe.get_repo(private_repo)

          # Don't duplicate existing issues
          for pri_issue in pri_repo:
            if pri_issue.title == ISSUE_TITLE:
              print(f"Issue with title: {ISSUE_TITLE} already moved. Skipping...")
              skipReference = True
            break

          if ("internal-synced" in ISSUE_LABELS):
            skipReference = True
            print(
                f"This issue with title {ISSUE_TITLE} has been previously synced. Consider closing external issues. Skipping..."
            )

          # Create reference
          if not skipReference:
            pri_repo.create_issue(
              title=ISSUE_TITLE,
              body= "a",
              labels=["external-reference"],
            )
            print(f"Creating reference for {ISSUE_TITLE}")
            # Add a label to the external issue indicating it's been synced internally.
            issue.add_to_labels("internal-synced")

          print("Sync completed")
          EOF
